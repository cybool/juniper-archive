---
# Create Blueprint
- hosts: localhost
  gather_facts: False
  become: False
  connection: local
  tasks:
    # Retrieve API token
    - name: retrieve an API token for our session
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/user/login"
        method: POST
        headers:
          Content-Type: application/json
        status_code: 201
        validate_certs: False
        body_format: json
        body:
          username: "{{ apstra.username }}"
          password: "{{ apstra.password }}"
      register: api_token

    - name: create 'api_token' object by setting it equal to value in response
      ansible.builtin.set_fact:
        api_token: "{{ api_token.json.token }}"

    # CREATE IP POOL RESOURCES
    - name: "### CREATE LEAF LOOPBACK IP POOL"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        display_name: "Loopbacks: {{ blueprint_name }} Leaf"
        type: "ip-pools"
        id: "{{ blueprint_name | upper }}_LEAF_LOOPBACK"
        tags:
          - "{{ blueprint_name | lower }}"
          - leaf
        subnets:
          - "{{ resources_ippool_leaf }}"

        # define to delete or create
        state: present

    - name: "### CREATE SPINE LOOPBACK IP POOL"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        display_name: "Loopbacks: {{ blueprint_name }} Spine"
        type: "ip-pools"
        id: "{{ blueprint_name | upper }}_SPINE_LOOPBACK"
        tags:
          - "{{ blueprint_name }}"
          - spine
        subnets:
          - "{{ resources_ippool_spine }}"

        # define to delete or create
        state: present

    - name: "### CREATE DC FABRIC IP POOL"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        display_name: "Fabric: {{ blueprint_name }}"
        type: "ip-pools"
        id: "{{ blueprint_name | lower }}_fabric"
        tags:
          - "{{ blueprint_name | upper }}"
          - fabric
        subnets:
          - "{{ resources_ippool_fabric }}"

        # define to delete or create
        state: present

    # CREATE ASN POOL RESOURCES
    - name: "### SPLIT UP ASN NUMBERS FROM SNOW"
      ansible.builtin.set_fact:
        resources_asn_spine_split: "{{ resources_asn_spine | range_splitter }}"
        resources_asn_leaf_split: "{{ resources_asn_leaf | range_splitter }}"

    - name: "### CREATE SPINE ASN POOL"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        type: "asn-pools"
        display_name: "{{ blueprint_name }} Spine ASN Pool"
        id: "{{ blueprint_name | lower }}_spine_asn"
        tags:
          - "{{ blueprint_name | upper }}"
        ranges:
          - first: "{{ resources_asn_spine_split['first'] }}"
            last: "{{ resources_asn_spine_split['last'] }}"

        # define to delete or create
        state: present

    - name: "### CREATE LEAF ASN POOL"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        type: "asn-pools"
        display_name: "{{ blueprint_name }} Leaf ASN Pool"
        id: "{{ blueprint_name | lower }}_leaf_asn"
        tags:
          - "{{ blueprint_name | upper }}"
        ranges:
          - first: "{{ resources_asn_leaf_split['first'] }}"
            last: "{{ resources_asn_leaf_split['last'] }}"

        # define to delete or create
        state: present

    # CREATE VNI POOL RESOURCES
    - name: "### SPLIT UP VNI NUMBERS FROM SNOW"
      ansible.builtin.set_fact:
        resources_vni_pool_split: "{{ resources_vni_pool | range_splitter }}"

    - name: "### CREATE VNI POOL WITH TWO RANGES"
      cdot65.apstra.resources:
        # define apstra server parameters
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"

        # define request
        type: "vni-pools"
        display_name: "{{ blueprint_name }} VNI Pool"
        id: "{{ blueprint_name | lower }}_vni"
        tags:
          - "{{ blueprint_name | upper }}"
        ranges:
          - first: "{{ resources_vni_pool_split['first'] }}"
            last: "{{ resources_vni_pool_split['last'] }}"

        # define to delete or create
        state: present

    # CREATE A BLUEPRINT
    - name: "### CREATE BLUEPRINT"
      cdot65.apstra.blueprint:
        server: "{{ apstra.base_url }}"
        api_token: "{{ api_token }}"
        design: "two_stage_l3clos"
        init_type: "template_reference"
        template_id: "evpn-vqfx_offbox-virtual"
        label: "{{ blueprint_name }}"
        id: "{{ blueprint_name | lower }}"
        state: present
      register: blueprint

    # FORMAT MESSAGE TO SLACK
    - name: "### FORMAT MESSAGE TO SLACK"
      template:
        src: "templates/blueprint.j2"
        dest: "tmp/blueprint.yaml"
        mode: 0640

    # POST MESSAGE TO SLACK
    - name: "### POST SLACK MESSAGE"
      ansible.builtin.uri:
        url: "https://hooks.slack.com/services/{{ apstra.slack }}"
        return_content: yes
        status_code: 200
        method: POST
        body: "{{ lookup('file', 'tmp/blueprint.yaml' ) | from_yaml | to_json }}"
        body_format: json

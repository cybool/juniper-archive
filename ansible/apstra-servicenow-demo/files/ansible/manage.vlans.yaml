---
### #################################################################
### # MANAGE VLANS ON A TRUNK INTERFACE
### #################################################################
- hosts: localhost
  gather_facts: False
  become: False
  connection: local
  tasks:
    ### #################################################################
    ### # AUTHENTICATE AND RECEIVE AN API TOKEN FROM THE APSTRA SERVER
    ### #################################################################
    - name: retrieve an API token for our session
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/user/login"
        method: POST
        headers:
          Content-Type: application/json
        status_code: 201
        validate_certs: False
        body_format: json
        body:
          username: "{{ apstra.username }}"
          password: "{{ apstra.password }}"
      register: api_token

    - name: create 'api_token' object by setting it equal to value in response
      ansible.builtin.set_fact:
        api_token: "{{ api_token.json.token }}"

    # #################################################
    # ### Find VMware CT ID
    # #################################################
    - name: "### Find VMware CT ID"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/qe"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 200
        method: POST
        body:
          query: "match(node('ep_endpoint_policy', name='policy', label='{{ connectivity_template_name }}'))"
        body_format: json
      register: ct

    - name: Create an object 'endpoint_policy' and set it to the output
      ansible.builtin.set_fact:
        endpoint_policy: "{{ ct.json | cleanup_endpoint_policy }}"

    - name: "### Get configuration of our CT"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/endpoint-policies/{{ endpoint_policy.id }}"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 200
        method: GET
      register: ct_config

    - name: "### Get SubPolicy 1"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/endpoint-policies/{{ ct_config.json.endpoint_policy.attributes.subpolicies[0] }}"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 200
        method: GET
      register: sub_policy

    - name: "### Get CT ID"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/endpoint-policies/{{ sub_policy.json.endpoint_policy.attributes.first_subpolicy }}"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 200
        method: GET
      register: connectivity_template_id

    - name: "### Get VLAN ID"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/qe"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 200
        method: POST
        body:
          query: "match(node('virtual_network', name='vlan', label='{{ vlan_id }}'))"
        body_format: json
      register: vlan_configuration

    - name: Create an object 'endpoint_policy' and set it to the output
      ansible.builtin.set_fact:
        vlan_config: "{{ vlan_configuration.json | cleanup_vlan_config }}"

    # #################################################
    # ### UPDATE CONNECTIVITY TEMPLATE FOR TRUNK
    # #################################################
    - name: "### UPDATE CONNECTIVITY TEMPLATES"
      ansible.builtin.uri:
        url: "https://{{ apstra.base_url }}/api/blueprints/{{ blueprint_name }}/obj-policy-import"
        validate_certs: False
        headers:
          AuthToken: "{{ api_token }}"
        return_content: False
        status_code: 204
        method: PUT
        body:
          policies:
            - id: "{{ connectivity_template_id.json.endpoint_policy.id }}"
              label: "Virtual Network (Multiple)"
              description: "Add a list of VLANs to interfaces, as tagged or untagged."
              policy_type_name: "AttachMultipleVLAN"
              attributes:
                untagged_vn_node_id: "{{ connectivity_template_id.json.endpoint_policy.attributes.untagged_vn_node_id }}"
                tagged_vn_node_ids:
                  - "{{ connectivity_template_id.json.endpoint_policy.attributes.tagged_vn_node_ids[0] }}"
                  - "{{ vlan_config.id }}"
              visible: false
        body_format: json
